# NOTE: update this with your service name
service: notes-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  stage: ${opt.stage, self:provider.stage}
  sstApp: ${self:custom.stage}-notes-infrastructure
provider:
  name: aws
  runtime: nodejs12.x
  profile: serverless
  stage: dev
  region: eu-west-2
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
    tableName: !ImportValue '${self:custom.sstApp}-TableName'
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: 
        - !ImportValue '${self:custom.sstApp}-TableArn'

functions:
  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          authorizer: aws_iam
          cors: true
  get:
    handler: get.main
    events:
      - http:
          path: notes/{id}
          method: get
          authorizer: aws_iam
          cors: true
  list:
    handler: list.main
    events:
      - http:
          path: notes
          method: get
          authorizer: aws_iam
          cors: true
  update:
    handler: update.main
    events:
      - http:
          path: notes/{id}
          method: put
          authorizer: aws_iam
          cors: true
  delete:
    handler: delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          authorizer: aws_iam
          cors: true

resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/cognito-policy.yml)}
